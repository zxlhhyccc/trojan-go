<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>简介 on Trojan-Go Docs</title>
    <link>https://p4gefau1t.github.io/trojan-go/</link>
    <description>Recent content in 简介 on Trojan-Go Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://p4gefau1t.github.io/trojan-go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>启用多路复用提升网络并发性能</title>
      <link>https://p4gefau1t.github.io/trojan-go/advance/mux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/advance/mux/</guid>
      <description>注意，Trojan不支持这个特性 Trojan-Go支持使用多路复用提升网络并发性能。 Trojan协议基于TLS。在一个TLS安全连接建立之前</description>
    </item>
    
    <item>
      <title>基本介绍</title>
      <link>https://p4gefau1t.github.io/trojan-go/developer/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/developer/overview/</guid>
      <description>Trojan-Go的核心部分有 tunnel 各个协议具体实现 proxy 代理核心 config 配置注册和解析模块 redirector 主动检测欺骗模块 statistics 用户认证和统计模块 可以在对应文件夹中找到相</description>
    </item>
    
    <item>
      <title>使用Websocket进行CDN转发和抵抗中间人攻击</title>
      <link>https://p4gefau1t.github.io/trojan-go/advance/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/advance/websocket/</guid>
      <description>注意，Trojan不支持这个特性 Trojan-Go支持使用TLS+Websocket承载Trojan协议，使得利用CDN进行流量中转成为可能</description>
    </item>
    
    <item>
      <title>国内直连和广告屏蔽</title>
      <link>https://p4gefau1t.github.io/trojan-go/advance/router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/advance/router/</guid>
      <description>注意，Trojan不支持这个特性 Trojan-Go内建的路由模块可以帮助你实现国内直连，即客户端对于国内网站不经过代理，直接连接。 路由模块在</description>
    </item>
    
    <item>
      <title>隧道和反向代理</title>
      <link>https://p4gefau1t.github.io/trojan-go/advance/forward/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/advance/forward/</guid>
      <description>你可以使用Trojan-Go建立隧道。一个典型的应用是，使用Trojan-Go在本地建立一个无污染的DNS服务器，下面是一个配置的例子 { &amp;#34;run_type&amp;#34;: &amp;#34;forward&amp;#34;,</description>
    </item>
    
    <item>
      <title>一种基于SNI代理的多路径分流中继方案</title>
      <link>https://p4gefau1t.github.io/trojan-go/advance/nginx-relay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/advance/nginx-relay/</guid>
      <description>前言 Trojan 是一种通过 TLS 封装后进行加密数据传输的工具，利用其 TLS 的特性，我们可以通过 SNI 代理实现在同一主机端口上实现不同路径的分流中继。 所需工具及其他</description>
    </item>
    
    <item>
      <title>使用Shadowsocks插件/可插拔传输层</title>
      <link>https://p4gefau1t.github.io/trojan-go/advance/plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/advance/plugin/</guid>
      <description>注意，Trojan不支持这个特性 Trojan-Go支持可插拔的传输层。原则上，Trojan-Go可以使用任何有TCP隧道功能的软件作为传输层</description>
    </item>
    
    <item>
      <title>使用Shadowsocks AEAD进行二次加密</title>
      <link>https://p4gefau1t.github.io/trojan-go/advance/aead/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/advance/aead/</guid>
      <description>注意，Trojan不支持这个特性 Trojan协议本身无加密，其安全性依赖于下层的TLS。在一般情况下，TLS安全性很好，并不需要再次加密Tr</description>
    </item>
    
    <item>
      <title>自定义协议栈</title>
      <link>https://p4gefau1t.github.io/trojan-go/advance/customize-protocol-stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/advance/customize-protocol-stack/</guid>
      <description>注意，Trojan不支持这个特性 Trojan-Go允许高级用户自定义协议栈。在自定义模式下，Trojan-Go将放弃对协议栈的控制，允许用户</description>
    </item>
    
    <item>
      <title>使用API动态管理用户</title>
      <link>https://p4gefau1t.github.io/trojan-go/advance/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/advance/api/</guid>
      <description>注意，Trojan不支持这个特性 Trojan-Go使用gRPC提供了一组API，API支持以下功能： 用户信息增删改查 流量统计 速度统计 IP连接</description>
    </item>
    
    <item>
      <title>编译和自定义Trojan-Go</title>
      <link>https://p4gefau1t.github.io/trojan-go/developer/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/developer/build/</guid>
      <description>编译需要Go版本号高于1.14.x，请在编译前确认你的编译器版本。推荐使用snap安装和更新go。 编译方式非常简单，可以使用Makefile</description>
    </item>
    
    <item>
      <title>透明代理</title>
      <link>https://p4gefau1t.github.io/trojan-go/advance/nat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/advance/nat/</guid>
      <description>注意，Trojan不完全支持这个特性（UDP） Trojan-Go支持基于tproxy的透明TCP/UDP代理。 要开启透明代理模式，将一份正确</description>
    </item>
    
    <item>
      <title>Trojan协议</title>
      <link>https://p4gefau1t.github.io/trojan-go/developer/trojan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/developer/trojan/</guid>
      <description>Trojan-Go遵循原始的trojan协议，具体格式可以参考Trojan文档，这里不再赘述。 默认情况下，trojan协议使用TLS来承载，</description>
    </item>
    
    <item>
      <title>Trojan基本原理</title>
      <link>https://p4gefau1t.github.io/trojan-go/basic/trojan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/basic/trojan/</guid>
      <description>这个页面将会简单讲述Trojan协议的基本工作原理。如果你对于GFW和Trojan的工作方式不感兴趣，可以跳过这一小节。但为了更好地保护你的</description>
    </item>
    
    <item>
      <title>正确配置Trojan-Go</title>
      <link>https://p4gefau1t.github.io/trojan-go/basic/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/basic/config/</guid>
      <description>下面将介绍如何正确配置Trojan-Go以完全隐藏你的代理节点特征。 在开始之前，你需要 一个服务器，且未被GFW封锁 一个域名，可以使用免费的域</description>
    </item>
    
    <item>
      <title>多路复用</title>
      <link>https://p4gefau1t.github.io/trojan-go/developer/mux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/developer/mux/</guid>
      <description>Trojan-Go使用smux实现多路复用。同时实现了simplesocks协议用于进行代理传输。 当启用多路复用时，客户端首先发起TLS连接</description>
    </item>
    
    <item>
      <title>完整的配置文件</title>
      <link>https://p4gefau1t.github.io/trojan-go/basic/full-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/basic/full-config/</guid>
      <description>下面是一个完整的配置文件，其中的必填选项有 run_type local_addr local_port remote_addr remote_port 对于服务器server，key和cert为必填。 对于客户端client，反向代理隧道fo</description>
    </item>
    
    <item>
      <title>Websocket</title>
      <link>https://p4gefau1t.github.io/trojan-go/developer/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/developer/websocket/</guid>
      <description>由于使用CDN中转时，HTTPS对CDN透明，CDN可以审查Websocket传输内容。而Trojan协议本身是明文传输，因此为保证安全性，</description>
    </item>
    
    <item>
      <title>SimpleSocks协议</title>
      <link>https://p4gefau1t.github.io/trojan-go/developer/simplesocks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/developer/simplesocks/</guid>
      <description>SimpleSocks协议是无鉴权机制的简单代理协议，本质上是去除了sha224的Trojan协议。使用该协议的目的是减少多路复用时的ove</description>
    </item>
    
    <item>
      <title>API开发</title>
      <link>https://p4gefau1t.github.io/trojan-go/developer/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/developer/api/</guid>
      <description>Trojan-Go基于gRPC实现了API，使用protobuf交换数据。客户端可获取流量和速度信息；服务端可获取各用户流量，速度，在线情况</description>
    </item>
    
    <item>
      <title>可插拔传输层插件开发</title>
      <link>https://p4gefau1t.github.io/trojan-go/developer/plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/developer/plugin/</guid>
      <description>Trojan-Go鼓励开发传输层插件，以丰富协议类型，增加与GFW对抗的战略纵深。 传输层插件的作用，是替代tansport隧道的TLS进行传</description>
    </item>
    
    <item>
      <title>URL方案（草案）</title>
      <link>https://p4gefau1t.github.io/trojan-go/developer/url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p4gefau1t.github.io/trojan-go/developer/url/</guid>
      <description>Changelog encryption 格式修改为 ss;method:password 概述 感谢 @DuckSoft @StudentMain @phlinhng 对 Trojan-Go URL 方案的讨论和贡献。目前 URL 方案为草案，需要更多的实践和讨论。 Trojan-Go客户端可以接受URL，以定位</description>
    </item>
    
  </channel>
</rss>